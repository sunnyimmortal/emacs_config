#+STARTUP: overview
* The emacs config file
** self_function
** interface
#+BEGIN_SRC emacs-lisp
(load-theme 'misterioso)
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** config wsl
*** the brower
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chrome")
#+END_SRC
** better default
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(defalias 'list-buffers 'ibuffer)
(global-set-key (kbd "C-c a") 'org-agenda)
;; (defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC
*** useful in searching
;; more useful in searching but can use 
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

** Things want to achieve
*** TODO kbd for toggle evil-mode
*** TODO make the split windows show on the right
** packages
*** try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
*** org mode
#+BEGIN_SRC emacs-lisp
  ;;org-bullets
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


  (custom-set-variables
   '(org-directory "~/Sync/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   '(org-confirm-babel-evaluate nil)
   '(org-src-fontify-natively t)
   )

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "ad %s")
                  ("\\.x?html?\\'" . "/usr/bin/chrome %s")
                  ) org-file-apps ))

  (global-set-key "\C-ca" 'org-agenda)


  (use-package org-ac
    :ensure t
    :init
    (progn
      (require 'org-ac)
      (org-ac/config-default)
      ))

  (global-set-key (kbd "C-c c") 'org-capture)
  ;; no use
  ;; (setq org-agenda-files (list "~/Sync/orgfiles/gcal.org"
  ;;                              "~/Sync/orgfiles/soe-cal.org"
  ;;                              "~/Sync/orgfiles/i.org"
  ;;                              "~/Sync/orgfiles/schedule.org"))

  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Sync/orgfiles/gcal.org" )
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("l" "Link" entry (file+headline "~/Sync/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("b" "Blog idea" entry (file+headline "~/Sync/orgfiles/i.org" "Blog Topics:")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
           "* TODO %?\n%u" :prepend t)
          ("m" "Mail To Do" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
           "* TODO %a\n %?" :prepend t)
          ("g" "GMail To Do" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
           "* TODO %^L\n %?" :prepend t)
          ("n" "Note" entry (file+headline "~/Sync/orgfiles/i.org" "Notes")
           "* %u %? " :prepend t)
          ("s" "screencast" entry (file "~/Sync/orgfiles/screencast.org")
           "* %?\n%i\n")
          ))



  ;; (defadvice org-capture-finalize 
  ;;     (after delete-capture-frame activate)  
  ;;   "Advise capture-finalize to close the frame"  
  ;;   (if (equal "capture" (frame-parameter nil 'name))  
  ;;       (delete-frame)))

  ;; (defadvice org-capture-destroy 
  ;;     (after delete-capture-frame activate)  
  ;;   "Advise capture-destroy to close the frame"  
  ;;   (if (equal "capture" (frame-parameter nil 'name))  
  ;;       (delete-frame)))  

  ;; (use-package noflet
  ;;   :ensure t )
  ;; (defun make-capture-frame ()
  ;;   "Create a new frame and run org-capture."
  ;;   (interactive)
  ;;   (make-frame '((name . "capture")))
  ;;   (select-frame-by-name "capture")
  ;;   (delete-other-windows)
  ;;   (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
  ;;           (org-capture)))
#+END_SRC
*** evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode 1))
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
#+END_SRC
*** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC
*** counsel
#+BEGIN_SRC emacs-lisp
      (use-package counsel
        :ensure t
        :bind
        (("M-y" . counsel-yank-pop)
         :map ivy-minibuffer-map
         ("M-y" . ivy-next-line)))
#+END_SRC
*** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
    ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ))
#+END_SRC
*** auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    )
)
;; dirty fix for having AC everywhere
(define-globalized-minor-mode real-global-auto-complete-mode
  auto-complete-mode (lambda ()
                       (if (not (minibufferp (current-buffer)))
                         (auto-complete-mode 1))
                       ))
(real-global-auto-complete-mode t)
#+END_SRC
*** color-theme
#+BEGIN_SRC emacs-lisp
;;(use-package color-theme
;;  :ensure t)
#+END_SRC
*** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init 
(progn 
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
#+END_SRC
*** TODO Reveal.js
the thing do not work in the wsl
;; #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)
(setq org-reveal-root "/mnt/d/reveal.js/")
(setq org-reveal-mathjax t)
    
(use-package htmlize
:ensure t)
 
#+END_SRC
*** fly-check
#+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init
        (global-flycheck-mode t)
        )
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
      (use-package jedi
        :ensure t
        :init
        (add-hook 'python-mode-hook 'jedi:setup)
        (add-hook 'python-mode-hook 'jedi:ac-setup))

        (use-package elpy
        :ensure t
        :config
        (elpy-enable))
#+END_SRC
*** TODO Yasnippet
#+BEGIN_SRC emacs-lisp
    (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
and need to install Yasnippet-snippets
to learn snippets check this web page [[https://flask.palletsprojects.com/en/1.1.x/][flask]]
*** Undo Tree
#+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :ensure t
        :init
        (global-undo-tree-mode))
#+END_SRC
*** Misc packages
#+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)

  ;; config the cursor style
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      )

  ;; hungry delete

  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-q") 'er/expand-region))

  ;;
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
**** TODO there is a function need to learn 
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :config
    (global-set-key (kbd "C-x C-o") 'iedit-mode))

    ; if you're windened, narrow to the region, if you're narrowed, widen
    ; bound to C-x n
    (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.
    
    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing command.
           ;; Remove this first conditional if you don't want it.
           (cond ((ignore-errors (org-edit-src-code))
                  (delete-other-windows))
                 ((org-at-block-p)
                  (org-narrow-to-block))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC
**** Things may not be needed
This is for multiple machine 
to Synchronization
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)
*** Load other files
#+BEGIN_SRC emacs-lisp
      (defun load-if-exists (f)
        ""
        (if (file-readable-p f)
            (load-file f)))
#+END_SRC
*** Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django" . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t))
    (setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned

#+END_SRC

*** TODO Tex
it always first load the pdf reader
#+BEGIN_SRC emacs-lisp
  ;; (use-package tex
  ;; :ensure auctex)
    ;; (setq Tex-view-program-selection '((((output-dvi has-no-display-manager)
    ;;   "dvi2tty")
    ;;  ((output-dvi style-pstricks)
    ;;   "dvips and gv")
    ;;  (output-dvi "xdvi")
    ;;  (output-pdf "Evince")
    ;;  (output-html "xdg-open"))))
      (defun tex-view ()
        (interactive)
        (tex-send-command "evince" (tex-append tex-print-file ".pdf")))
#+END_SRC
** kbd
*** find-file
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\e\ec")
                  (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))

  (global-set-key (kbd "\e\ei")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/i.org")))

  (global-set-key (kbd "\e\el")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/links.org")))
#+END_SRC
